(function() {var implementors = {};
implementors["backtrace"] = [{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !UnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrintFmt","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for DecoderReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for EncoderWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for EncoderStringWriter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_modes"] = [{"text":"impl UnwindSafe for BlockModeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidKeyIvLength","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; UnwindSafe for Cbc&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; UnwindSafe for Cfb&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; UnwindSafe for Cfb8&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; UnwindSafe for Ecb&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; UnwindSafe for Ofb&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; UnwindSafe for Pcbc&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl UnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !UnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; UnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libsignal_protocol"] = [{"text":"impl UnwindSafe for Address","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMACBasedKeyDerivationFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreKeyBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreKeyBundleBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SessionBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SessionCipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionRecord","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionState","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StoreContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultCrypto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalCipherTypeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalCipherType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IdentityKeyPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreKeyList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrivateKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionSignedPreKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CiphertextMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreKeySignalMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CiphertextType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InMemoryIdentityKeyStore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InMemoryPreKeyStore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InMemorySignedPreKeyStore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InMemorySessionStore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SerializedSession","synthetic":true,"types":[]}];
implementors["libsignal_protocol_sys"] = [{"text":"impl UnwindSafe for signal_type_base","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_buffer_list","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_int_list","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_protocol_store_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_protocol_address","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_protocol_sender_key_name","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ec_public_key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ec_private_key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ec_key_pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ec_public_key_list","synthetic":true,"types":[]},{"text":"impl UnwindSafe for hkdf_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_protocol_key_helper_pre_key_list_node","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ciphertext_message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for pre_key_signal_message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sender_key_message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sender_key_distribution_message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ratchet_chain_key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ratchet_root_key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ratchet_identity_key_pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ratchet_message_keys","synthetic":true,"types":[]},{"text":"impl UnwindSafe for session_pre_key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for session_signed_pre_key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for session_pre_key_bundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for session_builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for session_record","synthetic":true,"types":[]},{"text":"impl UnwindSafe for session_record_state_node","synthetic":true,"types":[]},{"text":"impl UnwindSafe for session_state","synthetic":true,"types":[]},{"text":"impl UnwindSafe for session_cipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sender_message_key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sender_chain_key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sender_key_state","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sender_key_record","synthetic":true,"types":[]},{"text":"impl UnwindSafe for group_session_builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for group_cipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for fingerprint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for displayable_fingerprint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for scannable_fingerprint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for fingerprint_generator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for device_consistency_signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for device_consistency_commitment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for device_consistency_message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for device_consistency_signature_list","synthetic":true,"types":[]},{"text":"impl UnwindSafe for symmetric_signal_protocol_parameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for alice_signal_protocol_parameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bob_signal_protocol_parameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_crypto_provider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_protocol_session_store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_protocol_pre_key_store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_protocol_signed_pre_key_store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_protocol_identity_key_store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for signal_protocol_sender_key_store","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LevelFilter","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl UnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; UnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; UnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl UnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl UnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; UnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindStyle","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()